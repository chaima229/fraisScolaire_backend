const crypto = require("crypto");

const algorithm = "aes-256-cbc";
const ivLength = 16;

// Cl√© d'encryption par d√©faut s√©curis√©e (32 caract√®res exactement)
const DEFAULT_ENCRYPTION_KEY = "a_very_secure_32_byte_secret_key!";

// R√©cup√©rer la cl√© d'environnement ou utiliser la cl√© par d√©faut
let ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || DEFAULT_ENCRYPTION_KEY;

// Forcer une cl√© valide de 32 bytes
let finalKey = ENCRYPTION_KEY;

// Log pour debug
console.log(`üîë Cl√© d'encryption d√©tect√©e: ${ENCRYPTION_KEY.substring(0, 10)}... (longueur: ${ENCRYPTION_KEY.length})`);

// S'assurer que la cl√© fait exactement 32 bytes
if (finalKey.length !== 32) {
  console.warn(
    `‚ö†Ô∏è  ENCRYPTION_KEY length: ${finalKey.length} bytes, expected 32 bytes. Using secure default.`
  );
  finalKey = DEFAULT_ENCRYPTION_KEY;
}

// V√©rification finale et correction automatique
if (finalKey.length !== 32) {
  console.warn(`‚ö†Ô∏è  Cl√© d'encryption de longueur incorrecte: ${finalKey.length} bytes`);
  
  // Correction automatique de la cl√©
  if (finalKey.length < 32) {
    // Compl√©ter avec des z√©ros
    finalKey = finalKey.padEnd(32, '0');
    console.log("‚úÖ Cl√© compl√©t√©e √† 32 bytes");
  } else if (finalKey.length > 32) {
    // Tronquer √† 32 caract√®res
    finalKey = finalKey.substring(0, 32);
    console.log("‚úÖ Cl√© tronqu√©e √† 32 bytes");
  }
  
  // V√©rification finale
  if (finalKey.length !== 32) {
    console.error("‚ùå Impossible de corriger la cl√© d'encryption");
    throw new Error("Invalid encryption key configuration");
  }
}

console.log("‚úÖ Cl√© d'encryption valid√©e (32 bytes)");

const encrypt = (text) => {
  if (text === null || text === undefined || text === "") {
    return text; // Return as is if null, undefined, or empty
  }
  const iv = crypto.randomBytes(ivLength);
  const cipher = crypto.createCipheriv(
    algorithm,
    Buffer.from(finalKey),
    iv
  );
  let encrypted = cipher.update(String(text), "utf8", "hex");
  encrypted += cipher.final("hex");
  return iv.toString("hex") + ":" + encrypted;
};

const decrypt = (text) => {
  if (text === null || text === undefined || text === "") {
    return text; // Return as is if null, undefined, or empty
  }
  // If value is not a string (e.g. seed stored an array/object), don't attempt to split/decrypt.
  if (typeof text !== "string") {
    return text;
  }
  const textParts = text.split(":");
  if (textParts.length !== 2) {
    console.error("Decryption error: Invalid encrypted text format.");
    return null; // Or throw an error, depending on desired behavior
  }
  const iv = Buffer.from(textParts.shift(), "hex");
  const encryptedText = textParts.join(":");
  const decipher = crypto.createDecipheriv(
    algorithm,
    Buffer.from(finalKey),
    iv
  );
  let decrypted = decipher.update(encryptedText, "hex", "utf8");
  decrypted += decipher.final("utf8");
  return decrypted;
};

module.exports = { encrypt, decrypt };
