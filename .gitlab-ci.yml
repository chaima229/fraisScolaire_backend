image: node:18-alpine

variables:
  FIREBASE_PROJECT_ID: $FIREBASE_PROJECT_ID
  FIREBASE_PROJECT_STAGING_ID: $FIREBASE_PROJECT_STAGING_ID
  FIREBASE_TOKEN: $FIREBASE_TOKEN
  NODE_ENV: production

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - back/node_modules/
    - front/node_modules/
    - .npm/

stages:
  - install
  - lint
  - test
  - security
  - build
  - deploy-staging
  - deploy-production

before_script:
  - npm install -g firebase-tools

# --- Install Backend ---
install_backend_dependencies:
  stage: install
  script:
    - cd back
    - npm ci --silent --prefer-offline
    - echo "Backend dependencies installed"
  artifacts:
    paths:
      - back/node_modules/
    expire_in: 1h

# --- Install Frontend ---
install_frontend_dependencies:
  stage: install
  script:
    - cd front
    - npm ci --silent --prefer-offline
    - echo "Frontend dependencies installed"
  artifacts:
    paths:
      - front/node_modules/
    expire_in: 1h

# --- Lint Backend ---
lint_backend:
  stage: lint
  dependencies:
    - install_backend_dependencies
  script:
    - cd back
    - npx eslint . --max-warnings=0
  allow_failure: false

# --- Lint Frontend ---
lint_frontend:
  stage: lint
  dependencies:
    - install_frontend_dependencies
  script:
    - cd front
    - npx eslint . --max-warnings=0
  allow_failure: false

# --- Test Backend ---
test_backend:
  stage: test
  dependencies:
    - install_backend_dependencies
  script:
    - cd back
    - npm test -- --coverage --watchAll=false
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: back/coverage/cobertura-coverage.xml
    paths:
      - back/coverage/
    expire_in: 1w
  only:
    - main
    - test
    - merge_requests

# --- Test Frontend ---
test_frontend:
  stage: test
  dependencies:
    - install_frontend_dependencies
  script:
    - cd front
    - npm run test -- --coverage --watchAll=false
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: front/coverage/cobertura-coverage.xml
    paths:
      - front/coverage/
    expire_in: 1w
  only:
    - main
    - test
    - merge_requests

# --- Security Audit Backend ---
security_audit_backend:
  stage: security
  dependencies:
    - install_backend_dependencies
  script:
    - cd back
    - npm audit --audit-level high || true
    - npm audit fix --dry-run || true
  allow_failure: true
  only:
    - main
    - test
    - merge_requests

# --- Security Audit Frontend ---
security_audit_frontend:
  stage: security
  dependencies:
    - install_frontend_dependencies
  script:
    - cd front
    - npm audit --audit-level high || true
    - npm audit fix --dry-run || true
  allow_failure: true
  only:
    - main
    - test
    - merge_requests

# --- Build Backend ---
build_backend:
  stage: build
  dependencies:
    - install_backend_dependencies
  script:
    - cd back
    - npm run build
    - echo "Backend built"
  artifacts:
    paths:
      - back/dist/
    expire_in: 2h
  only:
    - main
    - test

# --- Build Frontend ---
build_frontend:
  stage: build
  dependencies:
    - install_frontend_dependencies
  script:
    - cd front
    - npm run build
    - echo "Frontend built"
  artifacts:
    paths:
      - front/dist/
    expire_in: 2h
  only:
    - main
    - test

# --- Deploy Staging ---
deploy_staging:
  stage: deploy-staging
  dependencies:
    - build_backend
    - build_frontend
  script:
    - firebase use $FIREBASE_PROJECT_STAGING_ID --token $FIREBASE_TOKEN
    - firebase deploy --token $FIREBASE_TOKEN --project $FIREBASE_PROJECT_STAGING_ID
    - echo "Deployed to staging"
  environment:
    name: staging
    url: https://$FIREBASE_PROJECT_STAGING_ID.web.app
  only:
    - test
  when: manual

# --- Deploy Production ---
deploy_production:
  stage: deploy-production
  dependencies:
    - build_backend
    - build_frontend
  script:
    - firebase use $FIREBASE_PROJECT_ID --token $FIREBASE_TOKEN
    - firebase deploy --token $FIREBASE_TOKEN --project $FIREBASE_PROJECT_ID
    - echo "Deployed to production"
  environment:
    name: production
    url: https://$FIREBASE_PROJECT_ID.web.app
  only:
    - main
  when: manual

# --- Deploy Functions Only ---
deploy_functions_only:
  stage: deploy-production
  dependencies:
    - build_backend
  script:
    - firebase use $FIREBASE_PROJECT_ID --token $FIREBASE_TOKEN
    - firebase deploy --only functions --token $FIREBASE_TOKEN --project $FIREBASE_PROJECT_ID
    - echo "Functions deployed only"
  environment:
    name: production
  only:
    - main
  when: manual

# --- Deploy Hosting Only ---
deploy_hosting_only:
  stage: deploy-production
  dependencies:
    - build_frontend
  script:
    - firebase use $FIREBASE_PROJECT_ID --token $FIREBASE_TOKEN
    - firebase deploy --only hosting --token $FIREBASE_TOKEN --project $FIREBASE_PROJECT_ID
    - echo "Hosting deployed only"
  environment:
    name: production
  only:
    - main
  when: manual

