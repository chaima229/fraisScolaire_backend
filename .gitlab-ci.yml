image: node:18-alpine

# Variables globales
variables:
  FIREBASE_PROJECT_ID: $FIREBASE_PROJECT_ID
  FIREBASE_TOKEN: $FIREBASE_TOKEN
  NODE_ENV: production

# Cache pour optimiser les builds
cache:
  paths:
    - back/functions/node_modules/
    - front/node_modules/
    - .npm/

# Définition des stages
stages:
  - install
  - lint
  - test
  - security
  - build
  - deploy-staging
  - deploy-production

# Installation des dépendances Backend
install_backend_dependencies:
  stage: install
  before_script:
    - cd back/functions
  script:
    - npm ci --cache .npm --prefer-offline
    - echo "Backend dependencies installed successfully"
  artifacts:
    paths:
      - back/functions/node_modules/
    expire_in: 1 hour

# Installation des dépendances Frontend
install_frontend_dependencies:
  stage: install
  before_script:
    - cd front
  script:
    - npm ci --cache .npm --prefer-offline
    - echo "Frontend dependencies installed successfully"
  artifacts:
    paths:
      - front/node_modules/
    expire_in: 1 hour

# Linting Backend
lint_backend:
  stage: lint
  dependencies:
    - install_backend_dependencies
  before_script:
    - cd back/functions
  script:
    - npm run lint
  allow_failure: false

# Linting Frontend
lint_frontend:
  stage: lint
  dependencies:
    - install_frontend_dependencies
  before_script:
    - cd front
  script:
    - npm run lint
  allow_failure: false

# Tests Backend
test_backend:
  stage: test
  dependencies:
    - install_backend_dependencies
  before_script:
    - cd back/functions
  script:
    - npm test -- --coverage --watchAll=false
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: back/functions/coverage/cobertura-coverage.xml
    paths:
      - back/functions/coverage/
    expire_in: 1 week
  only:
    - test
    - main
    - merge_requests

# Tests Frontend
test_frontend:
  stage: test
  dependencies:
    - install_frontend_dependencies
  before_script:
    - cd front
  script:
    - npm run test -- --coverage --watchAll=false
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: front/coverage/cobertura-coverage.xml
    paths:
      - front/coverage/
    expire_in: 1 week
  only:
    - test
    - main
    - merge_requests

# Audit de sécurité Backend
security_audit_backend:
  stage: security
  dependencies:
    - install_backend_dependencies
  before_script:
    - cd back/functions
  script:
    - npm audit --audit-level high
    - npm audit fix --dry-run
  allow_failure: true
  only:
    - test
    - main
    - merge_requests

# Audit de sécurité Frontend
security_audit_frontend:
  stage: security
  dependencies:
    - install_frontend_dependencies
  before_script:
    - cd front
  script:
    - npm audit --audit-level high
    - npm audit fix --dry-run
  allow_failure: true
  only:
    - test
    - main
    - merge_requests

# Build Backend Functions
build_backend:
  stage: build
  dependencies:
    - install_backend_dependencies
  before_script:
    - cd back/functions
    - npm install -g firebase-tools
  script:
    - npm run build
    - echo "Firebase functions built successfully"
  artifacts:
    paths:
      - back/functions/lib/
    expire_in: 2 hours
  only:
    - test
    - main

# Build Frontend
build_frontend:
  stage: build
  dependencies:
    - install_frontend_dependencies
  before_script:
    - cd front
  script:
    - npm run build
    - echo "Frontend built successfully"
  artifacts:
    paths:
      - front/dist/
    expire_in: 2 hours
  only:
    - test
    - main

# Déploiement en staging (branche test)
deploy_staging:
  stage: deploy-staging
  dependencies:
    - build_backend
    - build_frontend
  before_script:
    - npm install -g firebase-tools
    - firebase use $FIREBASE_PROJECT_STAGING_ID --token $FIREBASE_TOKEN
  script:
    - firebase deploy --token $FIREBASE_TOKEN --project $FIREBASE_PROJECT_STAGING_ID
    - echo "Deployed backend and frontend to staging environment"
  environment:
    name: staging
    url: https://$FIREBASE_PROJECT_STAGING_ID.web.app
  only:
    - test
  when: manual

# Déploiement en production (branche main)
deploy_production:
  stage: deploy-production
  dependencies:
    - build_backend
    - build_frontend
  before_script:
    - npm install -g firebase-tools
    - firebase use $FIREBASE_PROJECT_ID --token $FIREBASE_TOKEN
  script:
    - firebase deploy --token $FIREBASE_TOKEN --project $FIREBASE_PROJECT_ID
    - echo "Deployed backend and frontend to production environment"
  environment:
    name: production
    url: https://$FIREBASE_PROJECT_ID.web.app
  only:
    - main
  when: manual
  allow_failure: false

# Déploiement séparé des functions seulement (si besoin)
deploy_functions_only:
  stage: deploy-production
  dependencies:
    - build_backend
  before_script:
    - npm install -g firebase-tools
    - firebase use $FIREBASE_PROJECT_ID --token $FIREBASE_TOKEN
  script:
    - firebase deploy --only functions --token $FIREBASE_TOKEN --project $FIREBASE_PROJECT_ID
    - echo "Deployed functions only to production"
  environment:
    name: production
  only:
    - main
  when: manual
  allow_failure: false

# Déploiement séparé du hosting seulement (si besoin)
deploy_hosting_only:
  stage: deploy-production
  dependencies:
    - build_frontend
  before_script:
    - npm install -g firebase-tools
    - firebase use $FIREBASE_PROJECT_ID --token $FIREBASE_TOKEN
  script:
    - firebase deploy --only hosting --token $FIREBASE_TOKEN --project $FIREBASE_PROJECT_ID
    - echo "Deployed hosting only to production"
  environment:
    name: production
  only:
    - main
  when: manual
  allow_failure: false

# Job de rollback en cas de problème
rollback_production:
  stage: deploy-production
  before_script:
    - npm install -g firebase-tools
    - firebase use $FIREBASE_PROJECT_ID --token $FIREBASE_TOKEN
  script:
    - firebase functions:config:clone --from $FIREBASE_PROJECT_ID --token $FIREBASE_TOKEN
    - echo "Rollback completed"
  environment:
    name: production
  only:
    - main
  when: manual
  allow_failure: false

  # Job de test indépendant
  test_pipeline:
  stage: test
  script:
    - echo "Pipeline works!"
